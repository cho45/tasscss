#!/usr/bin/env node
// # vim:set ft=javascript:
var TASS = require('../lib/tass').TASS;

var fs = require('fs');
var path = require('path');
var util = require('util');
var opts = {
	watch : [],
	files : []
};
var args = process.argv.slice(2);

for (var i = 0, len = args.length; i < len; i++) {
	if (args[i].match(/--watch/)) {
		opts.watch.push(args[++i]);
	} else
	if (args[i].match(/--version|-v/)) {
		console.error('tass version: ' + TASS.version);
	} else
	if (args[i].match(/--\S+|-\S+/)) {
		console.error('Unknown option: ' + args[i]);
		process.exit(1);
	} else {
		opts.files.push(args[i]);
	}
}

if (opts.watch) {
	opts.watch.forEach(function (watch) {
		var io = watch.split(':');
		var input = io[0], output = io[1];
		if (fs.statSync(input).isDirectory()) {
			if (!fs.statSync(output).isDirectory()) {
				log('error', '%s is not a directory', output);
				process.exit(1);
			}
			log('watch', input);
			var getFiles = function () {
				var ret = {};
				fs.readdirSync(input).filter(function (_) { return /\.tass$/.test(_) }).forEach(function (_) {
					ret[_] = fs.statSync(path.join(input, _)).mtime.getTime();
				});
				return ret;
			};
			var files = getFiles();
			fs.watch(input, function (e) {
				if (e != 'change') return;
				var current = getFiles();
				for (var key in current) if (current.hasOwnProperty(key)) {
					if (current[key] > (files[key] || 0)) {
						log('change', key);
						var name = key.replace(/\.tass$/, '.css');
						var file = path.join(output, name);
						fs.writeFileSync(file, TASS(fs.readFileSync(path.join(input, key), 'utf-8')), 'utf-8');
						log('compiled', '%s => %s', key, file);
					}
				}
				files = current;
			});
		} else {
			log('watch', input);
			fs.watch(input, function (e) {
				if (e != 'change') return;
				log('change', input);
				fs.writeFileSync(output, TASS(fs.readFileSync(input, 'utf-8')), 'utf-8');
				log('compiled', '%s => %s', input, output);
			});
		}
	});
} else {
	if (opts.files[0] == '-') {
		process.stdin.resume();
		process.stdin.setEncoding('utf8');

		var css = '';
		process.stdin.on('data', function (data) { css += data; });
		process.stdin.on('end', function () {
			console.log(TASS(css));
		});
	} else {
		opts.files.forEach(function (file) {
			console.log(TASS(fs.readFileSync(file, 'utf-8')));
		});
	}
}

function log (type, format, args) {
	var args = Array.prototype.slice.call(arguments);
	type = args.shift();
	format = args.shift();
	args.unshift(type);
	args.unshift("\u001b[32m[%s]\u001b[0m " + format);
	console.log.apply(console, args);
}
